{"version":3,"sources":["components/Clock/index.js","components/Schedule/index.js","config.js","components/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","time","moment","format","this","intervalID","setInterval","tick","clearInterval","setState","className","Component","Schedule","events","loggedIn","calendarId","that","gapi","window","load","client","init","then","request","toISOString","endOf","response","result","items","err","console","log","e","target","value","preventDefault","getEvents","map","event","i","key","summary","start","dateTime","onSubmit","onFormSubmit","type","name","onChange","onCalendarIdInputChange","placeholder","TodoList","componentDidMount","getTasks","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","item","index","cardStyle","color","background","taskComplete","textDecoration","style","onClick","undoTask","updateTask","deleteTask","splice","autoComplete","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a47c1d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\nimport './style.css';\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: moment().format(\"HH:mm\"),\n    };\n  }\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n  tick() {\n    this.setState({\n      time: moment().format(\"HH:mm\")\n    });\n  }\n  render() {\n    const { time } = this.state;\n    return (\n      <p className=\"App-clock\">\n        {time}\n      </p>\n    );\n  }\n}\n\nexport default Clock;","import React, { Component } from 'react';\nimport moment from \"moment\";\n\nimport { GOOGLE_API_KEY } from '../../config.js';\nimport './style.css';\n\nclass Schedule extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: [],\n      loggedIn: null,\n      calendarId: \"\",\n    }\n  }\n\n  getEvents() {\n    let that = this;\n    let maxEvents = 5;\n    const gapi = window.gapi;\n    function start() {\n      gapi.client.init({\n        'apiKey': GOOGLE_API_KEY\n      }).then(function() {\n        return gapi.client.request({\n          'path': `https://www.googleapis.com/calendar/v3/calendars/${that.state.calendarId}/events?maxResults=${maxEvents}&orderBy=updated&timeMin=${moment().toISOString()}&timeMax=${moment()\n          .endOf(\"day\")\n          .toISOString()}`,\n        })\n      }).then( (response) => {\n        let events = response.result.items;\n        that.setState({ events });\n      }, (err) => {\n        console.log(err);\n      });\n    }\n    gapi.load('client', start);\n  }\n\n  onCalendarIdInputChange(e) {\n    console.log(e.target.value);\n    this.setState({ calendarId: e.target.value });\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    this.setState({ loggedIn: true });\n    this.getEvents();\n  }\n\n  render() {\n    if (this.state.loggedIn) {\n      return (\n        <div className=\"schedule\">\n          <h2 className=\"schedule-heading\">Upcoming meetings</h2>\n          {this.state.events.map((event, i) => (\n            <p key={i}>{event.summary} at {moment(event.start.dateTime).format('HH:mm')}</p>\n          ))}\n        </div>\n      );\n    } else {\n      return (\n        <form onSubmit={(e) => this.onFormSubmit(e)} className=\"schedule\">\n          <input\n            type=\"text\"\n            name=\"calendarId\"\n            onChange={(e) => this.onCalendarIdInputChange(e)}\n            value={this.state.calendarId}\n            placeholder=\"Google Calendar ID\"\n            className=\"calendar-id-input\"\n          />\n          <button className=\"calendar-submit\" type=\"submit\">Submit</button>\n        </form>\n      );\n    }\n  }\n}\n\nexport default Schedule;","export const GOOGLE_API_KEY = 'AIzaSyDph-ap1PUcdfVH66PfGNzrAKjUFEmbssI';","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      task: \"\",\n      tasklist: []\n    };\n  }\n\n  // on load get the task list\n  componentDidMount = () => {\n    this.getTasks();\n  };\n\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // add task to the list\n  onSubmit = () => {\n    // check is task is empty string\n    if (this.state.task) {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n      // task list is null means empty\n      // create an empty list\n      if (tasklist == null) {\n        tasklist = [];\n      }\n\n      // create task object\n      // default status is false\n      let task = {\n        task: this.state.task,\n        status: false\n      };\n\n      // add the task to the task list\n      tasklist.push(task);\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // clear the form\n      this.setState({ task: \"\" });\n\n      // refresh the tasks\n      this.getTasks();\n    }\n  };\n\n  // get all the tasks\n  getTasks = () => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n    // check if task list is empty\n    if (tasklist) {\n      // sort all the tasks on the basis of status\n      // completed task will move down\n      tasklist = tasklist.sort((a, b) => {\n        if (a.status) {\n          return 1;\n        } else if (b.status) {\n          return -1;\n        }\n        return 0;\n      });\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // set the tasklist to the state\n      this.setState({\n        // default color\n        // Incomplete: black\n        // complete: green\n        tasklist: tasklist.map((item, index) => {\n          let cardStyle = { color: \"black\", background: \"lightgrey\" };\n          let taskComplete = { textDecoration: \"none\" };\n\n          if (item.status) {\n            cardStyle.color = \"green\";\n            cardStyle.background = \"beige\";\n            taskComplete[\"textDecoration\"] = \"line-through\";\n          }\n          return (\n            <div key={index} className=\"task\" style={cardStyle}>\n              <div>\n                <p className=\"task-body\" style={taskComplete}>{item.task}</p>\n\n                <div className=\"task-options\">\n                  {item.status ? (\n                    <p className=\"task-option\" onClick={() => this.undoTask(index)}>Undo</p>\n                  ):(\n                    <p className=\"task-option\" onClick={() => this.updateTask(index)}>Done</p>\n                  )}\n                  <p className=\"task-option\" onClick={() => this.deleteTask(index)}>Delete</p>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      });\n    }\n  };\n\n  // update the task status to true\n  updateTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to true\n    tasklist[index].status = true;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // undone the task status from true to false\n  undoTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to false\n    tasklist[index].status = false;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // delete the task from the task list\n  deleteTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // remove the task from the task list\n    tasklist.splice(index, 1);\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  render() {\n    return (\n      <div className=\"todo-list\">\n        <div>\n          <h1 className=\"app-header\">My Task List</h1>{\" \"}\n        </div>\n        <div className=\"app-form\">\n          <form onSubmit={this.onSubmit} className=\"todo-form\">\n            <input\n              type=\"text\"\n              name=\"task\"\n              onChange={this.onChange}\n              value={this.state.task}\n              placeholder=\"New task...\"\n              autoComplete=\"off\"\n              className=\"todo-input\"\n            />\n            <button className=\"todo-submit\" type=\"submit\">Create</button>\n          </form>\n        </div>\n        <div>\n          <div className=\"task-list\">{this.state.tasklist}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\n\nimport Clock from './components/Clock';\nimport Schedule from './components/Schedule';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <section className=\"section section-one\">\n        <Clock />\n        <Schedule />\n      </section>\n      <section className=\"section section-two\">\n        <TodoList />\n      </section>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}