{"version":3,"sources":["components/Settings/index.js","components/Clock/index.js","components/Schedule/index.js","config.js","components/TabBar/index.js","components/TodoList/index.js","components/Notes/index.js","App.js","serviceWorker.js","index.js"],"names":["Settings","props","className","onClick","onSettingsCogClick","isSettingsOpen","type","id","value","isShowingSchedule","onSettingsShowSheduleClick","htmlFor","Clock","state","time","moment","format","this","intervalID","setInterval","tick","clearInterval","setState","Component","Schedule","events","loggedIn","localStorage","getItem","calendarId","getEvents","that","gapi","window","load","client","init","then","request","toISOString","endOf","response","result","items","err","console","log","e","target","preventDefault","setItem","length","map","event","i","key","summary","start","dateTime","onSubmit","onFormSubmit","name","onChange","onCalendarIdInputChange","placeholder","TabBar","onTabClick","tabIndex","activeTab","updateActiveTabIndex","createTab","tabName","prompt","tabs","currentState","JSON","stringify","parse","activeTabIndex","tab","DragHandle","sortableHandle","SortableItem","sortableElement","SortableList","sortableContainer","index","TodoList","componentDidMount","getTasks","taskInput","focus","task","tasklist","status","push","sort","a","b","item","cardStyle","color","background","taskComplete","textDecoration","style","undoTask","updateTask","deleteTask","alt","splice","onSortEnd","oldIndex","newIndex","arrayMove","ref","input","autoComplete","useDragHandle","Notes","onCopyToClipboardClick","notes","isShowingNothingToCopy","setTimeout","navigator","clipboard","writeText","isShowingCopiedText","onNotesChange","substring","App","notesList","todoListItems","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97bc9a62.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Settings = (props) => {\n  return (\n    <div className=\"settings\">\n      <i className=\"settings-icon fas fa-cog\" onClick={() => props.onSettingsCogClick()}></i>\n      {props.isSettingsOpen && (\n        <>\n          <div className=\"settings-checkbox-container\">\n            <input\n              type=\"checkbox\"\n              id=\"is-showing-shedule\"\n              value={props.isShowingSchedule}\n              onClick={() => props.onSettingsShowSheduleClick()}\n            />\n            <label htmlFor=\"is-showing-shedule\">Show Schedule</label>\n          </div>\n          {/* <div className=\"settings-checkbox-container\">\n            <input\n              type=\"checkbox\"\n              id=\"is-showing-clock\"\n              value={props.isShowingClock}\n              onClick={() => props.onSettingsShowClockClick()}\n            />\n            <label htmlFor=\"is-showing-clock\">Show Clock</label>\n          </div> */}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Settings;","import React, { Component } from 'react';\nimport moment from 'moment';\n\nimport './style.css';\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: moment().format(\"HH:mm\"),\n    };\n  }\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n  tick() {\n    this.setState({\n      time: moment().format(\"HH:mm\")\n    });\n  }\n  render() {\n    const { time } = this.state;\n    return (\n      <p className=\"App-clock\">\n        {time}\n      </p>\n    );\n  }\n}\n\nexport default Clock;","import React, { Component } from 'react';\nimport moment from \"moment\";\n\nimport { GOOGLE_API_KEY } from '../../config.js';\nimport './style.css';\n\nclass Schedule extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: [],\n      loggedIn: !!localStorage.getItem(\"calendarId\"),\n      calendarId: \"\",\n    }\n  }\n\n  componentDidMount() {\n    this.getEvents();\n  }\n\n  getEvents() {\n    let that = this;\n    let maxEvents = 5;\n    const calendarId = localStorage.getItem(\"calendarId\");\n    const gapi = window.gapi;\n    function start() {\n      gapi.client.init({\n        'apiKey': GOOGLE_API_KEY\n      }).then(function() {\n        return gapi.client.request({\n          'path': `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?maxResults=${maxEvents}&orderBy=updated&timeMin=${moment().toISOString()}&timeMax=${moment()\n          .endOf(\"day\")\n          .toISOString()}`,\n        })\n      }).then( (response) => {\n        let events = response.result.items;\n        that.setState({ events });\n      }, (err) => {\n        console.log(err);\n      });\n    }\n    gapi.load('client', start);\n  }\n\n  onCalendarIdInputChange(e) {\n    this.setState({ calendarId: e.target.value });\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    localStorage.setItem(\"calendarId\", this.state.calendarId);\n    this.setState({ loggedIn: true });\n    this.getEvents();\n  }\n\n  render() {\n    if (this.state.loggedIn) {\n      return (\n        <div className=\"schedule\">\n          {this.state.events.length > 0 ? (\n            <h2 className=\"schedule-heading\">Upcoming meetings</h2>\n            ) : (\n            <h2 className=\"schedule-heading no-upcoming\">No Upcoming meetings</h2>\n          )}\n          {this.state.events.length > 0 && this.state.events.map((event, i) => (\n            <p key={i}>{event.summary} at {event.start && event.start.dateTime && moment(event.start.dateTime).format('HH:mm')}</p>\n          ))}\n        </div>\n      );\n    } else {\n      return (\n        <form onSubmit={(e) => this.onFormSubmit(e)} className=\"schedule\">\n          <input\n            type=\"text\"\n            name=\"calendarId\"\n            onChange={(e) => this.onCalendarIdInputChange(e)}\n            value={this.state.calendarId}\n            placeholder=\"Google Calendar ID\"\n            className=\"calendar-id-input\"\n          />\n          <button className=\"calendar-submit\" type=\"submit\">Submit</button>\n        </form>\n      );\n    }\n  }\n}\n\nexport default Schedule;","export const GOOGLE_API_KEY = 'AIzaSyDph-ap1PUcdfVH66PfGNzrAKjUFEmbssI';\n\nexport const DEFAULT_TABS = '[{ \"name\": \"Tab 1\" }]';","import React, { Component } from \"react\";\n\nimport { DEFAULT_TABS } from '../../config.js';\nimport \"./style.css\";\n\nclass TabBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabs: localStorage.getItem(\"tabs\") ? JSON.parse(localStorage.getItem(\"tabs\")) : JSON.parse(DEFAULT_TABS),\n      activeTab: props.activeTabIndex,\n    };\n  }\n  \n  onTabClick = (tabIndex) => {\n    this.setState({ activeTab: tabIndex }, () => {\n      this.props.updateActiveTabIndex(tabIndex);\n    })\n  }\n\n  createTab = () => {\n    const tabName = prompt(\"Please enter new tab name\", `Tab ${this.state.tabs.length + 1}`);\n    if (!!tabName) {\n      this.setState(currentState => {\n        const tabs = [\n          ...currentState.tabs,\n          { name: tabName },\n        ];\n        \n        return {\n          tabs,\n        };\n      }, () => {\n        this.props.updateActiveTabIndex(this.state.tabs.length + 1);\n        // save the tabs in local storage\n        localStorage.setItem(\"tabs\", JSON.stringify(this.state.tabs));\n      });\n    }\n  }\n\n  render() {\n    const { onTabClick, createTab } = this;\n    const { tabs, activeTab } = this.state;\n    return (\n      <div className=\"tab-bar\">\n        {tabs.map((tab, i) => (\n          <div key={i} className={`tab ${activeTab === i ? \"active\" : \"inactive\"}`} onClick={() => onTabClick(i)}>\n            {tab.name}\n          </div>\n        ))}\n        {tabs.length < 5 && (\n          <div className=\"tab-create\" onClick={createTab}>\n            <i className=\"fas fa-plus\"></i>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TabBar;","import React, { Component } from \"react\";\nimport arrayMove from 'array-move';\nimport { sortableContainer, sortableElement, sortableHandle } from 'react-sortable-hoc';\n\nimport \"./style.css\";\n\nconst DragHandle = sortableHandle(() => <i className=\"drag-handle task-option fas fa-grip-lines\"></i>);\n\nconst SortableItem = sortableElement(({value}) => <li>{value}</li>);\n\nconst SortableList = sortableContainer(({items}) => {\n  return (\n    <ul>\n      {items.map((value, index) => (\n        <SortableItem key={`item-${index}`} index={index} value={value} />\n      ))}\n    </ul>\n  );\n});\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      task: \"\",\n      tasklist: []\n    };\n  }\n\n  // on load get the task list\n  componentDidMount = () => {\n    this.getTasks();\n    this.taskInput.focus();\n  };\n\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // add task to the list\n  onSubmit = () => {\n    // check is task is empty string\n    if (this.state.task) {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n      // task list is null means empty\n      // create an empty list\n      if (tasklist == null) {\n        tasklist = [];\n      }\n\n      // create task object\n      // default status is false\n      let task = {\n        task: this.state.task,\n        status: false\n      };\n\n      // add the task to the task list\n      tasklist.push(task);\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // clear the form\n      this.setState({ task: \"\" });\n\n      // refresh the tasks\n      this.getTasks();\n      this.taskInput.focus();\n    }\n  };\n\n  // get all the tasks\n  getTasks = () => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n    // check if task list is empty\n    if (tasklist) {\n      // sort all the tasks on the basis of status\n      // completed task will move down\n      tasklist = tasklist.sort((a, b) => {\n        if (a.status) {\n          return 1;\n        } else if (b.status) {\n          return -1;\n        }\n        return 0;\n      });\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // set the tasklist to the state\n      this.setState({\n        // default color\n        // Incomplete: black\n        // complete: green\n        tasklist: tasklist.map((item, index) => {\n          let cardStyle = { color: \"black\", background: \"#A4A4A4\" };\n          let taskComplete = { textDecoration: \"none\" };\n\n          if (item.status) {\n            cardStyle.color = \"green\";\n            cardStyle.background = \"beige\";\n            taskComplete[\"textDecoration\"] = \"line-through\";\n          }\n          return (\n            <div key={index} className=\"task\" style={cardStyle}>\n              {tasklist.length > 1 && (\n                <div className=\"task-header\">\n                  <DragHandle />\n                </div>\n              )}\n              <div className=\"task-main\">\n                <p className=\"task-body\" style={taskComplete}>{item.task}</p>\n              </div>\n\n              <div className=\"task-options\">\n                {item.status ? (\n                  <i className=\"task-option fas fa-undo\" onClick={() => this.undoTask(index)}></i>\n                ):(\n                  <i className=\"task-option fas fa-check\" onClick={() => this.updateTask(index)}></i>\n                )}\n                <i className=\"task-option fas fa-trash-alt\" onClick={() => this.deleteTask(index)} alt=\"delete\"></i>\n              </div>\n            </div>\n          );\n        })\n      });\n    }\n  };\n\n  // update the task status to true\n  updateTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to true\n    tasklist[index].status = true;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // undone the task status from true to false\n  undoTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to false\n    tasklist[index].status = false;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // delete the task from the task list\n  deleteTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // remove the task from the task list\n    tasklist.splice(index, 1);\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  onSortEnd = ({oldIndex, newIndex}) => {\n    // this.setState(({tasklist}) => ({\n    //   tasklist: arrayMove(tasklist, oldIndex, newIndex),\n    // }));\n\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // remove the task from the task list\n    tasklist = arrayMove(tasklist, oldIndex, newIndex);\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n  render() {\n    return (\n      <div className=\"todo-list\">\n        <div>\n          <h1 className=\"app-header\">My Task List</h1>{\" \"}\n        </div>\n        <div className=\"app-form\">\n          <form onSubmit={this.onSubmit} className=\"todo-form\">\n            <input\n              ref={(input) => { this.taskInput = input; }}\n              type=\"text\"\n              name=\"task\"\n              onChange={this.onChange}\n              value={this.state.task}\n              placeholder=\"New task...\"\n              autoComplete=\"off\"\n              className=\"todo-input\"\n            />\n            <button className=\"todo-submit\" type=\"submit\">Create</button>\n          </form>\n        </div>\n        {/* <div> */}\n          <div className=\"task-list\">\n            <SortableList items={this.state.tasklist} onSortEnd={this.onSortEnd} useDragHandle />\n          </div>\n        {/* </div> */}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;","import React, { Component } from \"react\";\n\nimport \"./style.css\";\n\nclass Notes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShowingCopiedText: false,\n      isShowingNothingToCopy: false,\n    };\n  }\n\n  onCopyToClipboardClick = () => {\n    if (this.props.notes.length < 1) {\n      this.setState({ isShowingNothingToCopy: true }, () => {\n        setTimeout(() => {\n          this.setState({ isShowingNothingToCopy: false });\n        }, 4000);\n      });\n    } else {\n      navigator.clipboard.writeText(this.props.notes);\n      this.setState({ isShowingCopiedText: true }, () => {\n        setTimeout(() => {\n          this.setState({ isShowingCopiedText: false });\n        }, 4000);\n      });\n    }\n  }\n\n  render() {\n    const { onCopyToClipboardClick } = this;\n    const { notes, onNotesChange } = this.props;\n    const { isShowingCopiedText, isShowingNothingToCopy } = this.state;\n    return (\n      <div className=\"notes\">\n        <div>\n          <h1 className=\"app-header\">Notes</h1>\n        </div>\n        <textarea\n          type=\"text\"\n          name=\"notes\"\n          onChange={(e) => onNotesChange(e.target.value)}\n          value={notes}\n          placeholder=\"Notes\"\n          autoComplete=\"off\"\n          className=\"notes-input\"\n        />\n        <div className=\"notes-copy-flex-container\">\n          <div className=\"notes-copy-inner-container\" onClick={onCopyToClipboardClick}>\n            <i className=\"notes-copy-icon fas fa-clipboard\"></i>\n            <p className=\"notes-copy-label\">Copy to Clipboard</p>\n          </div>\n          {isShowingCopiedText && (\n            <>\n              {notes.length > 25 ? (\n                <p className=\"notes-copied-text\">Copied \"<span>{notes.substring(0, 24) + \"...\"}</span>\" to clipboard</p>\n              ) :\n              (\n                <p className=\"notes-copied-text\">Copied \"<span>{notes}</span>\" to clipboard</p>\n                )}\n            </>\n          )}\n          {isShowingNothingToCopy && <p className=\"notes-copied-text\">There is nothing to copy!</p>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Notes;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Settings from './components/Settings';\nimport Clock from './components/Clock';\nimport Schedule from './components/Schedule';\nimport TabBar from './components/TabBar';\nimport TodoList from './components/TodoList';\nimport Notes from './components/Notes';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeTabIndex: 0,\n      notesList: localStorage.getItem(\"notesList\") ? JSON.parse(localStorage.getItem(\"notesList\")) : [],\n      todoListItems: localStorage.getItem(\"todoListItems\") ? JSON.parse(localStorage.getItem(\"todoListItems\")) : [],\n      isSettingsOpen: false,\n      isShowingSchedule: false,\n    }\n  }\n  render() {\n\n    const onSettingsCogClick = () => {\n      this.setState({ isSettingsOpen: !isSettingsOpen });\n    }\n    \n    const onSettingsShowSheduleClick = () => {\n      this.setState({ isShowingSchedule: !isShowingSchedule });\n    }\n    \n    const updateActiveTabIndex = (activeTabIndex) => {\n      this.setState({ activeTabIndex }, () => {\n        console.log(this.state.activeTabIndex);\n      });\n    }\n\n    const onNotesChange = (value) => {\n      this.setState(currentState => {\n        let notesList = currentState.notesList;\n        notesList[this.state.activeTabIndex] = value;\n        console.log(notesList)\n        return {\n          notesList,\n        };\n      }, () => {\n        // update notes in local storage\n        localStorage.setItem(\"notesList\", JSON.stringify(this.state.notesList));\n      })\n    };\n\n    const { isSettingsOpen, isShowingSchedule, activeTabIndex, notesList } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <Settings\n            isSettingsOpen={isSettingsOpen}\n            onSettingsCogClick={onSettingsCogClick}\n            isShowingSchedule={isShowingSchedule}\n            onSettingsShowSheduleClick={onSettingsShowSheduleClick}\n          />\n          <Clock />\n          {isShowingSchedule && <Schedule />}\n          <TabBar\n            activeTabIndex={activeTabIndex}\n            updateActiveTabIndex={updateActiveTabIndex}\n          />\n        </header>\n        <section className=\"section section-one\">\n          <TodoList />\n        </section>\n        <section className=\"section section-two\">\n          <Notes\n            notes={notesList[activeTabIndex] ? notesList[activeTabIndex] : \"\"}\n            onNotesChange={onNotesChange}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}