{"version":3,"sources":["components/Clock/index.js","components/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","time","Date","getHours","getMinutes","this","intervalID","setInterval","tick","clearInterval","today","setState","className","Component","TodoList","componentDidMount","getTasks","onChange","event","target","name","value","onSubmit","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","map","item","index","cardStyle","color","background","taskComplete","textDecoration","key","style","onClick","undoTask","updateTask","deleteTask","splice","type","placeholder","autoComplete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa0ba3b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './style.css';\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().getHours() + \":\" + new Date().getMinutes(),\n    };\n  }\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n  tick() {\n    const today = new Date();\n    this.setState({\n      time: today.getHours() + \":\" + today.getMinutes()\n    });\n  }\n  render() {\n    const { time } = this.state;\n    return (\n      <p className=\"App-clock\">\n        {time}\n      </p>\n    );\n  }\n}\n\nexport default Clock;","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      task: \"\",\n      tasklist: []\n    };\n  }\n\n  // on load get the task list\n  componentDidMount = () => {\n    this.getTasks();\n  };\n\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // add task to the list\n  onSubmit = () => {\n    // check is task is empty string\n    if (this.state.task) {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n      // task list is null means empty\n      // create an empty list\n      if (tasklist == null) {\n        tasklist = [];\n      }\n\n      // create task object\n      // default status is false\n      let task = {\n        task: this.state.task,\n        status: false\n      };\n\n      // add the task to the task list\n      tasklist.push(task);\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // clear the form\n      this.setState({ task: \"\" });\n\n      // refresh the tasks\n      this.getTasks();\n    }\n  };\n\n  // get all the tasks\n  getTasks = () => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n    // check if task list is empty\n    if (tasklist) {\n      // sort all the tasks on the basis of status\n      // completed task will move down\n      tasklist = tasklist.sort((a, b) => {\n        if (a.status) {\n          return 1;\n        } else if (b.status) {\n          return -1;\n        }\n        return 0;\n      });\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // set the tasklist to the state\n      this.setState({\n        // default color\n        // Incomplete: black\n        // complete: green\n        tasklist: tasklist.map((item, index) => {\n          let cardStyle = { color: \"black\", background: \"lightgrey\" };\n          let taskComplete = { textDecoration: \"none\" };\n\n          if (item.status) {\n            cardStyle.color = \"green\";\n            cardStyle.background = \"beige\";\n            taskComplete[\"textDecoration\"] = \"line-through\";\n          }\n          return (\n            <div key={index} className=\"task\" style={cardStyle}>\n              <div>\n                <p className=\"task-body\" style={taskComplete}>{item.task}</p>\n\n                <div className=\"task-options\">\n                  {item.status ? (\n                    <p className=\"task-option\" onClick={() => this.undoTask(index)}>Undo</p>\n                  ):(\n                    <p className=\"task-option\" onClick={() => this.updateTask(index)}>Done</p>\n                  )}\n                  <p className=\"task-option\" onClick={() => this.deleteTask(index)}>Delete</p>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      });\n    }\n  };\n\n  // update the task status to true\n  updateTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to true\n    tasklist[index].status = true;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // undone the task status from true to false\n  undoTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to false\n    tasklist[index].status = false;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // delete the task from the task list\n  deleteTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // remove the task from the task list\n    tasklist.splice(index, 1);\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  render() {\n    return (\n      <div className=\"todo-list\">\n        <div>\n          <h1 className=\"app-header\">My Task List</h1>{\" \"}\n        </div>\n        <div className=\"app-form\">\n          <form onSubmit={this.onSubmit} className=\"todo-form\">\n            <input\n              type=\"text\"\n              name=\"task\"\n              onChange={this.onChange}\n              value={this.state.task}\n              placeholder=\"New task...\"\n              autoComplete=\"off\"\n              className=\"todo-input\"\n            />\n            <button className=\"todo-submit\" type=\"submit\">Create</button>\n          </form>\n        </div>\n        <div>\n          <div className=\"task-list\">{this.state.tasklist}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\n\nimport Clock from './components/Clock';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <section className=\"section section-one\">\n        <Clock />\n      </section>\n      <section className=\"section section-two\">\n        <TodoList />\n      </section>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}